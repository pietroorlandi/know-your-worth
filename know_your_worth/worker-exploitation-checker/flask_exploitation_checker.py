from flask import Flask, request, jsonify
import os

from know_your_worth.rag.rag_engine import RAGEngine
from know_your_worth.llm.sonar_llm import SonarClient
from know_your_worth.utils.os_utils import read_yaml_file
from utils import get_prompt_exploitation_checker, get_prompt_query_rewriting


app = Flask(__name__)
llm_client = SonarClient(
    api_key=os.getenv("SONAR_API_KEY"),
    model=os.getenv("SONAR_API_MODEL")
)
rag_engine_exploitation_checker = RAGEngine(
    db_dir="./index/ccnl",
    collection_name="ccnl",
    llm_api_key=os.getenv("SONAR_API_KEY"),
    llm_model=os.getenv("SONAR_API_MODEL"),
)


@app.route('/query_rewriting', methods=['POST'])
def get_query_rewriting():
    try:
        data = request.get_json()
        # Validazione dei dati di input
        if not data:
            return jsonify({"error": "Nessun dato JSON fornito"}), 400
        questionnaire_schema = data.get("questionnaire_schema")
        worker_answers = data.get("worker_answers")
        follow_up_questions = data.get("follow_up_questions")
        follow_up_answers = data.get("follow_up_answers")
        # Generazione del prompt
        prompt = get_prompt_query_rewriting(
            questionnaire_schema,
            worker_answers,
            follow_up_questions,
            follow_up_answers
        )
        # Chiamata al client LLM
        response = llm_client.ask(prompt)
        # Estrazione del contenuto dalla risposta
        rewritten_query = ""
        # Gestione di diversi tipi di risposta
        if isinstance(response, str):
            rewritten_query = response
        elif hasattr(response, 'choices') and response.choices:
            rewritten_query = response.choices[0].message.content
        elif hasattr(response, 'content'):
            rewritten_query = response.content
        elif hasattr(response, 'message') and hasattr(response.message, 'content'):
            rewritten_query = response.message.content
        else:
            # Fallback: converti in stringa
            rewritten_query = str(response)
        return jsonify({"rewritten_query": rewritten_query})
    except Exception as e:
        print(f"‚ö†Ô∏è Errore durante la chiamata a llm.ask: {str(e)}")
        print(f"üîç Tipo di errore: {type(e)}")
        # Restituisci un JSON di errore con status code appropriato
        return jsonify({"error": str(e)}), 500


@app.route('/check_exploitation', methods=['POST'])
def check_exploitation():
    data = request.get_json()
    questionnaire_schema = data.get("questionnaire_schema")
    worker_answers = data.get("worker_answers")
    follow_up_questions = data.get("follow_up_questions")
    follow_up_answers = data.get("follow_up_answers")
    prompt = get_prompt_exploitation_checker(
        questionnaire_schema,
        worker_answers,
        follow_up_questions,
        follow_up_answers
    )
    try:
        result = rag_engine_exploitation_checker.query(prompt=prompt)
        print(f"result: {result} - type: {type(result)}")
        # Estrai il testo della risposta
        if hasattr(result, 'response'):
            response_text = str(result.response)
        else:
            response_text = str(result)
        return jsonify({"result": response_text}), 200
    except Exception as e:
        print(f"Errore durante la query: {e}")
        return jsonify({"error": "Errore interno del server"}), 500

config = read_yaml_file("configs.yaml")

if __name__ == '__main__':
    app.run(debug=True, host=config["flask_check_exploitation"]["host"], port=config["flask_check_exploitation"]["port"])